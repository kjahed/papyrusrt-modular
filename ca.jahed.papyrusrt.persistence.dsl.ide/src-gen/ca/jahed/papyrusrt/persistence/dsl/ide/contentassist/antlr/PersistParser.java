/*
 * generated by Xtext 2.14.0
 */
package ca.jahed.papyrusrt.persistence.dsl.ide.contentassist.antlr;

import ca.jahed.papyrusrt.persistence.dsl.ide.contentassist.antlr.internal.InternalPersistParser;
import ca.jahed.papyrusrt.persistence.dsl.services.PersistGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class PersistParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PersistGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PersistGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getForEachStatementAccess().getAlternatives_3(), "rule__ForEachStatement__Alternatives_3");
			builder.put(grammarAccess.getCreateStatementAccess().getAlternatives(), "rule__CreateStatement__Alternatives");
			builder.put(grammarAccess.getCreateFolderStatementAccess().getAlternatives_4(), "rule__CreateFolderStatement__Alternatives_4");
			builder.put(grammarAccess.getCreateFileStatementAccess().getAlternatives_3(), "rule__CreateFileStatement__Alternatives_3");
			builder.put(grammarAccess.getFileNameAccess().getAlternatives_0(), "rule__FileName__Alternatives_0");
			builder.put(grammarAccess.getPersistAccess().getGroup(), "rule__Persist__Group__0");
			builder.put(grammarAccess.getRuleStatementAccess().getGroup(), "rule__RuleStatement__Group__0");
			builder.put(grammarAccess.getForEachStatementAccess().getGroup(), "rule__ForEachStatement__Group__0");
			builder.put(grammarAccess.getCreateFolderStatementAccess().getGroup(), "rule__CreateFolderStatement__Group__0");
			builder.put(grammarAccess.getCreateFileStatementAccess().getGroup(), "rule__CreateFileStatement__Group__0");
			builder.put(grammarAccess.getFileNameAccess().getGroup(), "rule__FileName__Group__0");
			builder.put(grammarAccess.getFileNameAccess().getGroup_1(), "rule__FileName__Group_1__0");
			builder.put(grammarAccess.getIncludeStatementAccess().getGroup(), "rule__IncludeStatement__Group__0");
			builder.put(grammarAccess.getIncludeStatementAccess().getGroup_1(), "rule__IncludeStatement__Group_1__0");
			builder.put(grammarAccess.getIncludeStatementAccess().getGroup_1_1(), "rule__IncludeStatement__Group_1_1__0");
			builder.put(grammarAccess.getWithStatementAccess().getGroup(), "rule__WithStatement__Group__0");
			builder.put(grammarAccess.getWithStatementAccess().getGroup_2(), "rule__WithStatement__Group_2__0");
			builder.put(grammarAccess.getWithStatementAccess().getGroup_2_1(), "rule__WithStatement__Group_2_1__0");
			builder.put(grammarAccess.getCallStatementAccess().getGroup(), "rule__CallStatement__Group__0");
			builder.put(grammarAccess.getCallStatementAccess().getGroup_1(), "rule__CallStatement__Group_1__0");
			builder.put(grammarAccess.getCallStatementAccess().getGroup_1_1(), "rule__CallStatement__Group_1_1__0");
			builder.put(grammarAccess.getEClassNameAccess().getGroup(), "rule__EClassName__Group__0");
			builder.put(grammarAccess.getEClassNameAccess().getGroup_1(), "rule__EClassName__Group_1__0");
			builder.put(grammarAccess.getEAttributeNameAccess().getGroup(), "rule__EAttributeName__Group__0");
			builder.put(grammarAccess.getEAttributeNameAccess().getGroup_1(), "rule__EAttributeName__Group_1__0");
			builder.put(grammarAccess.getEReferenceNameAccess().getGroup(), "rule__EReferenceName__Group__0");
			builder.put(grammarAccess.getEReferenceNameAccess().getGroup_1(), "rule__EReferenceName__Group_1__0");
			builder.put(grammarAccess.getPersistAccess().getModelAssignment_1(), "rule__Persist__ModelAssignment_1");
			builder.put(grammarAccess.getPersistAccess().getStatementsAssignment_3(), "rule__Persist__StatementsAssignment_3");
			builder.put(grammarAccess.getRuleStatementAccess().getIdAssignment_1(), "rule__RuleStatement__IdAssignment_1");
			builder.put(grammarAccess.getRuleStatementAccess().getRulesAssignment_3(), "rule__RuleStatement__RulesAssignment_3");
			builder.put(grammarAccess.getForEachStatementAccess().getClassAssignment_1(), "rule__ForEachStatement__ClassAssignment_1");
			builder.put(grammarAccess.getForEachStatementAccess().getContentsAssignment_3_0(), "rule__ForEachStatement__ContentsAssignment_3_0");
			builder.put(grammarAccess.getForEachStatementAccess().getCallsAssignment_3_1(), "rule__ForEachStatement__CallsAssignment_3_1");
			builder.put(grammarAccess.getCreateFolderStatementAccess().getNameAssignment_2(), "rule__CreateFolderStatement__NameAssignment_2");
			builder.put(grammarAccess.getCreateFolderStatementAccess().getContentsAssignment_4_0(), "rule__CreateFolderStatement__ContentsAssignment_4_0");
			builder.put(grammarAccess.getCreateFolderStatementAccess().getCallsAssignment_4_1(), "rule__CreateFolderStatement__CallsAssignment_4_1");
			builder.put(grammarAccess.getCreateFileStatementAccess().getNameAssignment_2(), "rule__CreateFileStatement__NameAssignment_2");
			builder.put(grammarAccess.getCreateFileStatementAccess().getIncludedReferencingAssignment_3_0(), "rule__CreateFileStatement__IncludedReferencingAssignment_3_0");
			builder.put(grammarAccess.getCreateFileStatementAccess().getIncludedAttributesAssignment_3_1(), "rule__CreateFileStatement__IncludedAttributesAssignment_3_1");
			builder.put(grammarAccess.getFileNameAccess().getPrefixAssignment_0_0(), "rule__FileName__PrefixAssignment_0_0");
			builder.put(grammarAccess.getFileNameAccess().getAttrAssignment_0_1(), "rule__FileName__AttrAssignment_0_1");
			builder.put(grammarAccess.getFileNameAccess().getRightAssignment_1_1(), "rule__FileName__RightAssignment_1_1");
			builder.put(grammarAccess.getIncludeStatementAccess().getIncludedAssignment_1_0(), "rule__IncludeStatement__IncludedAssignment_1_0");
			builder.put(grammarAccess.getIncludeStatementAccess().getIncludedAssignment_1_1_1(), "rule__IncludeStatement__IncludedAssignment_1_1_1");
			builder.put(grammarAccess.getWithStatementAccess().getIncludedAssignment_2_0(), "rule__WithStatement__IncludedAssignment_2_0");
			builder.put(grammarAccess.getWithStatementAccess().getIncludedAssignment_2_1_1(), "rule__WithStatement__IncludedAssignment_2_1_1");
			builder.put(grammarAccess.getCallStatementAccess().getRulesAssignment_1_0(), "rule__CallStatement__RulesAssignment_1_0");
			builder.put(grammarAccess.getCallStatementAccess().getRulesAssignment_1_1_1(), "rule__CallStatement__RulesAssignment_1_1_1");
			builder.put(grammarAccess.getEClassNameAccess().getBaseAssignment_0(), "rule__EClassName__BaseAssignment_0");
			builder.put(grammarAccess.getEClassNameAccess().getFieldsAssignment_1_1(), "rule__EClassName__FieldsAssignment_1_1");
			builder.put(grammarAccess.getEAttributeNameAccess().getBaseAssignment_0(), "rule__EAttributeName__BaseAssignment_0");
			builder.put(grammarAccess.getEAttributeNameAccess().getFieldsAssignment_1_1(), "rule__EAttributeName__FieldsAssignment_1_1");
			builder.put(grammarAccess.getEReferenceNameAccess().getBaseAssignment_0(), "rule__EReferenceName__BaseAssignment_0");
			builder.put(grammarAccess.getEReferenceNameAccess().getFieldsAssignment_1_1(), "rule__EReferenceName__FieldsAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PersistGrammarAccess grammarAccess;

	@Override
	protected InternalPersistParser createParser() {
		InternalPersistParser result = new InternalPersistParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PersistGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PersistGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
