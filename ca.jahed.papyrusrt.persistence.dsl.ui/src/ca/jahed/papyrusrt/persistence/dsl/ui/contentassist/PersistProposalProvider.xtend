/*
 * generated by Xtext 2.14.0
 */
package ca.jahed.papyrusrt.persistence.dsl.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.jface.text.contentassist.ICompletionProposal
import org.eclipse.ui.PlatformUI
import org.eclipse.ui.IFileEditorInput
import ca.jahed.papyrusrt.persistence.dsl.persist.Persist
import ca.jahed.papyrusrt.persistence.dsl.ui.ModelHelper
import ca.jahed.papyrusrt.persistence.dsl.persist.ForEachStatement
import ca.jahed.papyrusrt.persistence.dsl.persist.EReferenceName
import ca.jahed.papyrusrt.persistence.dsl.persist.EAttributeName
import org.eclipse.emf.common.util.EList
import ca.jahed.papyrusrt.persistence.dsl.persist.RuleStatement
import ca.jahed.papyrusrt.persistence.dsl.persist.EClassName

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class PersistProposalProvider extends AbstractPersistProposalProvider {	
	
	override completePersist_Model(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.completePersist_Model(model, assignment, context, acceptor)
		
		for(file : project.members) {
			val ICompletionProposal proposal = createCompletionProposal("\""+file.fullPath.toString+"\"", file.fullPath.toString, null, context);
			acceptor.accept(proposal)
		}
	}

	override completeEClassName_Base(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var rootModel = context.rootModel as Persist
		for(cls : ModelHelper.getClasses(rootModel.model)) {
			val ICompletionProposal proposal = createCompletionProposal(cls, cls, null, context);
			acceptor.accept(proposal)
		}
	}

	override completeEClassName_Fields(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var rootModel = context.rootModel as Persist
		for(cls : ModelHelper.getClasses(rootModel.model)) {
			val ICompletionProposal proposal = createCompletionProposal(cls, cls, null, context);
			acceptor.accept(proposal)
		}
	}
	
	override completeEReferenceName_Base(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var forEachStmt = getParentOfType(model, ForEachStatement) as ForEachStatement
		var rootModel = context.rootModel as Persist

		for(attr : ModelHelper.getReferences(rootModel.model, forEachStmt.class_.base)) {
			val ICompletionProposal proposal = createCompletionProposal(attr, attr, null, context);
			acceptor.accept(proposal)
		}
	}

	override completeEReferenceName_Fields(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(model instanceof EReferenceName) {
			var attrRef = model as EReferenceName
			var rootModel = context.rootModel as Persist
			var forEachStmt = getParentOfType(model, ForEachStatement) as ForEachStatement
			
			attrRef.fields.add(0, attrRef.base);
			try {
				for(attr : ModelHelper.getReferences(rootModel.model, forEachStmt.class_.base, attrRef.fields)) {
					val ICompletionProposal proposal = createCompletionProposal(attr, attr, null, context);
					acceptor.accept(proposal)
				}
			} finally {
				attrRef.fields.remove(0);
			}
		}
	}
	
	override completeEAttributeName_Base(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var forEachStmt = getParentOfType(model, ForEachStatement) as ForEachStatement
		var rootModel = context.rootModel as Persist

		for(attr : ModelHelper.getAttributes(rootModel.model, forEachStmt.class_.base)) {
			val ICompletionProposal proposal = createCompletionProposal(attr, attr, null, context);
			acceptor.accept(proposal)
		}
		
		for(attr : ModelHelper.getReferences(rootModel.model, forEachStmt.class_.base)) {
			val ICompletionProposal proposal = createCompletionProposal(attr, attr, null, context);
			acceptor.accept(proposal)
		}
	}
	
	override completeEAttributeName_Fields(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(model instanceof EAttributeName) {
			var attrRef = model as EAttributeName
			var rootModel = context.rootModel as Persist
			var forEachStmt = getParentOfType(model, ForEachStatement) as ForEachStatement
			
			attrRef.fields.add(0, attrRef.base);
			try {
				for(attr : ModelHelper.getAttributes(rootModel.model, forEachStmt.class_.base, attrRef.fields)) {
					val ICompletionProposal proposal = createCompletionProposal(attr, attr, null, context);
					acceptor.accept(proposal)
				}
				
				for(attr : ModelHelper.getReferences(rootModel.model, forEachStmt.class_.base, attrRef.fields)) {
					val ICompletionProposal proposal = createCompletionProposal(attr, attr, null, context);
					acceptor.accept(proposal)
				}
				
			} finally {
				attrRef.fields.remove(0);
			}
		}
	}
	
	override completeCallStatement_Rules(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.completeCallStatement_Rules(model, assignment, context, acceptor)
		
		var rootModel = context.rootModel as Persist
		for(child : rootModel.eContents)
			if(child instanceof RuleStatement) {
				val ICompletionProposal proposal = createCompletionProposal(child.id, child.id, null, context);
				acceptor.accept(proposal)
			}
	}
	
	def getParentOfType(EObject object, Class cls) {
		var currentObj = object;
		while(!cls.isInstance(currentObj))
			currentObj = currentObj.eContainer	
		return currentObj	
	}
	
//	override completeEClassReference_Base(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		super.completeEClassReference_Base(model, assignment, context, acceptor)
//		
//		var rootModel = context.rootModel as Persist
//		for(cls : ModelHelper.getClasses(rootModel.model)) {
//			val ICompletionProposal proposal = createCompletionProposal(cls, cls, null, context);
//			acceptor.accept(proposal)
//		}
//	}
	
//	override completeEClassReference_Fields(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		super.completeEClassReference_Fields(model, assignment, context, acceptor)
//		
//		var classRef = model as EClassReferenceImpl
//		var rootModel = context.rootModel as Persist
//		
//		for(cls : ModelHelper.getContainedClasses(rootModel.model, classRef.base, classRef.fields)) {
//			val ICompletionProposal proposal = createCompletionProposal(cls, cls, null, context);
//			acceptor.accept(proposal)
//		}
//	}

//	override completeObjectIncludeStatement_Object(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		super.completeObjectIncludeStatement_Object(model, assignment, context, acceptor)
//		
//		var rootModel = context.rootModel as Persist
//		var resourceSet = new ResourceSetImpl();
//		var resource = resourceSet.getResource(URI.createURI(rootModel.model), true)
//		var iter = resource.allContents;
//		while(iter.hasNext) {
//			var obj = iter.next;
//			val ICompletionProposal proposal = createCompletionProposal(obj.eClass.name, obj.eClass.name, null, context);
//			acceptor.accept(proposal)
//		}
//	}
//
//	override completeObjectIncludeStatement_References(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		super.completeObjectIncludeStatement_References(model, assignment, context, acceptor)
//		var includeStmt = model as ObjectIncludeStatement
//		
//		var rootModel = context.rootModel as Persist
//		var resourceSet = new ResourceSetImpl();
//		var resource = resourceSet.getResource(URI.createURI(rootModel.model), true)
//		var iter = resource.allContents;
//		while(iter.hasNext) {
//			var obj = iter.next;
//			if(obj.eClass.name == includeStmt.object.name) {
//				for(eref : obj.eClass.EAllReferences) {
//					val ICompletionProposal proposal = createCompletionProposal(eref.name, eref.name, null, context);
//					acceptor.accept(proposal)
//				}
//				return
//			}
//			
//		}
//	}
//	
//	override completeQualifiedName_Fields(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		super.completeQualifiedName_Fields(model, assignment, context, acceptor)
//		
//		var qualifiedName = model as QualifiedName
//		var includeStmt = model.eContainer as ObjectIncludeStatement
//		
//		var rootModel = context.rootModel as Persist
//		var resourceSet = new ResourceSetImpl()
//		var resource = resourceSet.getResource(URI.createURI(rootModel.model), true)
//		var iter = resource.allContents
//		
//		while(iter.hasNext) {
//			var rootObj = iter.next
//			if(rootObj.eClass.name == includeStmt.object.name) {
//			
//				for(eref : rootObj.eClass.EAllReferences) {
//					if(eref.name == qualifiedName.name) {
//						var currentObj = rootObj.eGet(eref, true) as EObject;
//						
//						for(field : qualifiedName.fields) {
//							for(eref2 : currentObj.eClass.EAllReferences) {
//								if(eref2.name == field) {
//									if(currentObj.eGet(eref2, true) instanceof EObject)
//										currentObj = currentObj.eGet(eref2, true) as EObject;
//								}
//							}
//						}
//						
//						for(feature : currentObj.eClass.EAllReferences) {
//							val ICompletionProposal proposal = createCompletionProposal(feature.name, feature.name, null, context);
//							acceptor.accept(proposal)
//						}
//					}
//				}
//				
//				return
//			}
//		}
//	}
	
	def getProject() {
		var editor = PlatformUI.workbench.activeWorkbenchWindow.activePage.activeEditor
		var file = (editor.editorInput as IFileEditorInput).file
		return file.project
	}
}
