/**
 * generated by Xtext 2.14.0
 */
package ca.jahed.papyrusrt.persistence.dsl.persist.impl;

import ca.jahed.papyrusrt.persistence.dsl.persist.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PersistFactoryImpl extends EFactoryImpl implements PersistFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PersistFactory init()
  {
    try
    {
      PersistFactory thePersistFactory = (PersistFactory)EPackage.Registry.INSTANCE.getEFactory(PersistPackage.eNS_URI);
      if (thePersistFactory != null)
      {
        return thePersistFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PersistFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PersistFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PersistPackage.PERSIST: return createPersist();
      case PersistPackage.RULE_STATEMENT: return createRuleStatement();
      case PersistPackage.FOR_EACH_STATEMENT: return createForEachStatement();
      case PersistPackage.CREATE_STATEMENT: return createCreateStatement();
      case PersistPackage.CREATE_FOLDER_STATEMENT: return createCreateFolderStatement();
      case PersistPackage.CREATE_FILE_STATEMENT: return createCreateFileStatement();
      case PersistPackage.FILE_NAME: return createFileName();
      case PersistPackage.INCLUDE_STATEMENT: return createIncludeStatement();
      case PersistPackage.WITH_STATEMENT: return createWithStatement();
      case PersistPackage.CALL_STATEMENT: return createCallStatement();
      case PersistPackage.ECLASS_NAME: return createEClassName();
      case PersistPackage.EATTRIBUTE_NAME: return createEAttributeName();
      case PersistPackage.EREFERENCE_NAME: return createEReferenceName();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Persist createPersist()
  {
    PersistImpl persist = new PersistImpl();
    return persist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleStatement createRuleStatement()
  {
    RuleStatementImpl ruleStatement = new RuleStatementImpl();
    return ruleStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForEachStatement createForEachStatement()
  {
    ForEachStatementImpl forEachStatement = new ForEachStatementImpl();
    return forEachStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CreateStatement createCreateStatement()
  {
    CreateStatementImpl createStatement = new CreateStatementImpl();
    return createStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CreateFolderStatement createCreateFolderStatement()
  {
    CreateFolderStatementImpl createFolderStatement = new CreateFolderStatementImpl();
    return createFolderStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CreateFileStatement createCreateFileStatement()
  {
    CreateFileStatementImpl createFileStatement = new CreateFileStatementImpl();
    return createFileStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FileName createFileName()
  {
    FileNameImpl fileName = new FileNameImpl();
    return fileName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IncludeStatement createIncludeStatement()
  {
    IncludeStatementImpl includeStatement = new IncludeStatementImpl();
    return includeStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WithStatement createWithStatement()
  {
    WithStatementImpl withStatement = new WithStatementImpl();
    return withStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CallStatement createCallStatement()
  {
    CallStatementImpl callStatement = new CallStatementImpl();
    return callStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClassName createEClassName()
  {
    EClassNameImpl eClassName = new EClassNameImpl();
    return eClassName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttributeName createEAttributeName()
  {
    EAttributeNameImpl eAttributeName = new EAttributeNameImpl();
    return eAttributeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReferenceName createEReferenceName()
  {
    EReferenceNameImpl eReferenceName = new EReferenceNameImpl();
    return eReferenceName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PersistPackage getPersistPackage()
  {
    return (PersistPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PersistPackage getPackage()
  {
    return PersistPackage.eINSTANCE;
  }

} //PersistFactoryImpl
