/*
 * generated by Xtext 2.14.0
 */
package ca.jahed.papyrusrt.persistence.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PersistGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PersistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.jahed.papyrusrt.persistence.dsl.Persist.Persist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelSTRINGTerminalRuleCall_1_0 = (RuleCall)cModelAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsRuleStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Persist:
		//	'model' model=STRING '{'
		//	statements+=RuleStatement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'model' model=STRING '{' statements+=RuleStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//model=STRING
		public Assignment getModelAssignment_1() { return cModelAssignment_1; }
		
		//STRING
		public RuleCall getModelSTRINGTerminalRuleCall_1_0() { return cModelSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//statements+=RuleStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//RuleStatement
		public RuleCall getStatementsRuleStatementParserRuleCall_3_0() { return cStatementsRuleStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RuleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.jahed.papyrusrt.persistence.dsl.Persist.RuleStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRulesForEachStatementParserRuleCall_3_0 = (RuleCall)cRulesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RuleStatement:
		//	'rule' id=ID '{'
		//	rules+=ForEachStatement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' id=ID '{' rules+=ForEachStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//rules+=ForEachStatement*
		public Assignment getRulesAssignment_3() { return cRulesAssignment_3; }
		
		//ForEachStatement
		public RuleCall getRulesForEachStatementParserRuleCall_3_0() { return cRulesForEachStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ForEachStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.jahed.papyrusrt.persistence.dsl.Persist.ForEachStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassEClassNameParserRuleCall_1_0 = (RuleCall)cClassAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cContentsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cContentsCreateStatementParserRuleCall_3_0_0 = (RuleCall)cContentsAssignment_3_0.eContents().get(0);
		private final Assignment cCallsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cCallsCallStatementParserRuleCall_3_1_0 = (RuleCall)cCallsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ForEachStatement:
		//	'foreach' class=EClassName '{' (contents+=CreateStatement
		//	| calls+=CallStatement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' class=EClassName '{' (contents+=CreateStatement | calls+=CallStatement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//class=EClassName
		public Assignment getClassAssignment_1() { return cClassAssignment_1; }
		
		//EClassName
		public RuleCall getClassEClassNameParserRuleCall_1_0() { return cClassEClassNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(contents+=CreateStatement | calls+=CallStatement)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//contents+=CreateStatement
		public Assignment getContentsAssignment_3_0() { return cContentsAssignment_3_0; }
		
		//CreateStatement
		public RuleCall getContentsCreateStatementParserRuleCall_3_0_0() { return cContentsCreateStatementParserRuleCall_3_0_0; }
		
		//calls+=CallStatement
		public Assignment getCallsAssignment_3_1() { return cCallsAssignment_3_1; }
		
		//CallStatement
		public RuleCall getCallsCallStatementParserRuleCall_3_1_0() { return cCallsCallStatementParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CreateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.jahed.papyrusrt.persistence.dsl.Persist.CreateStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateFileStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreateFolderStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CreateStatement:
		//	CreateFileStatement | CreateFolderStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//CreateFileStatement | CreateFolderStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CreateFileStatement
		public RuleCall getCreateFileStatementParserRuleCall_0() { return cCreateFileStatementParserRuleCall_0; }
		
		//CreateFolderStatement
		public RuleCall getCreateFolderStatementParserRuleCall_1() { return cCreateFolderStatementParserRuleCall_1; }
	}
	public class CreateFolderStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.jahed.papyrusrt.persistence.dsl.Persist.CreateFolderStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFolderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameFileNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cContentsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cContentsCreateStatementParserRuleCall_4_0_0 = (RuleCall)cContentsAssignment_4_0.eContents().get(0);
		private final Assignment cCallsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cCallsCallStatementParserRuleCall_4_1_0 = (RuleCall)cCallsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CreateFolderStatement:
		//	'create' 'folder' name=FileName '{' (contents+=CreateStatement
		//	| calls+=CallStatement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'create' 'folder' name=FileName '{' (contents+=CreateStatement | calls+=CallStatement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'folder'
		public Keyword getFolderKeyword_1() { return cFolderKeyword_1; }
		
		//name=FileName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//FileName
		public RuleCall getNameFileNameParserRuleCall_2_0() { return cNameFileNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(contents+=CreateStatement | calls+=CallStatement)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//contents+=CreateStatement
		public Assignment getContentsAssignment_4_0() { return cContentsAssignment_4_0; }
		
		//CreateStatement
		public RuleCall getContentsCreateStatementParserRuleCall_4_0_0() { return cContentsCreateStatementParserRuleCall_4_0_0; }
		
		//calls+=CallStatement
		public Assignment getCallsAssignment_4_1() { return cCallsAssignment_4_1; }
		
		//CallStatement
		public RuleCall getCallsCallStatementParserRuleCall_4_1_0() { return cCallsCallStatementParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CreateFileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.jahed.papyrusrt.persistence.dsl.Persist.CreateFileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameFileNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cIncludedReferencingAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cIncludedReferencingWithStatementParserRuleCall_3_0_0 = (RuleCall)cIncludedReferencingAssignment_3_0.eContents().get(0);
		private final Assignment cIncludedAttributesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cIncludedAttributesIncludeStatementParserRuleCall_3_1_0 = (RuleCall)cIncludedAttributesAssignment_3_1.eContents().get(0);
		
		//CreateFileStatement:
		//	'save' 'in' name=FileName (includedReferencing=WithStatement | includedAttributes=IncludeStatement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'save' 'in' name=FileName (includedReferencing=WithStatement | includedAttributes=IncludeStatement)?
		public Group getGroup() { return cGroup; }
		
		//'save'
		public Keyword getSaveKeyword_0() { return cSaveKeyword_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//name=FileName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//FileName
		public RuleCall getNameFileNameParserRuleCall_2_0() { return cNameFileNameParserRuleCall_2_0; }
		
		//(includedReferencing=WithStatement | includedAttributes=IncludeStatement)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//includedReferencing=WithStatement
		public Assignment getIncludedReferencingAssignment_3_0() { return cIncludedReferencingAssignment_3_0; }
		
		//WithStatement
		public RuleCall getIncludedReferencingWithStatementParserRuleCall_3_0_0() { return cIncludedReferencingWithStatementParserRuleCall_3_0_0; }
		
		//includedAttributes=IncludeStatement
		public Assignment getIncludedAttributesAssignment_3_1() { return cIncludedAttributesAssignment_3_1; }
		
		//IncludeStatement
		public RuleCall getIncludedAttributesIncludeStatementParserRuleCall_3_1_0() { return cIncludedAttributesIncludeStatementParserRuleCall_3_1_0; }
	}
	public class FileNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.jahed.papyrusrt.persistence.dsl.Persist.FileName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPrefixAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPrefixSTRINGTerminalRuleCall_0_0_0 = (RuleCall)cPrefixAssignment_0_0.eContents().get(0);
		private final Assignment cAttrAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cAttrEAttributeNameParserRuleCall_0_1_0 = (RuleCall)cAttrAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFileNameParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//FileName:
		//	(prefix=STRING | attr=EAttributeName) ('+' right=FileName)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(prefix=STRING | attr=EAttributeName) ('+' right=FileName)?
		public Group getGroup() { return cGroup; }
		
		//prefix=STRING | attr=EAttributeName
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//prefix=STRING
		public Assignment getPrefixAssignment_0_0() { return cPrefixAssignment_0_0; }
		
		//STRING
		public RuleCall getPrefixSTRINGTerminalRuleCall_0_0_0() { return cPrefixSTRINGTerminalRuleCall_0_0_0; }
		
		//attr=EAttributeName
		public Assignment getAttrAssignment_0_1() { return cAttrAssignment_0_1; }
		
		//EAttributeName
		public RuleCall getAttrEAttributeNameParserRuleCall_0_1_0() { return cAttrEAttributeNameParserRuleCall_0_1_0; }
		
		//('+' right=FileName)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }
		
		//right=FileName
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//FileName
		public RuleCall getRightFileNameParserRuleCall_1_1_0() { return cRightFileNameParserRuleCall_1_1_0; }
	}
	public class IncludeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.jahed.papyrusrt.persistence.dsl.Persist.IncludeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIncludedAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIncludedEReferenceNameParserRuleCall_1_0_0 = (RuleCall)cIncludedAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cIncludedAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cIncludedEReferenceNameParserRuleCall_1_1_1_0 = (RuleCall)cIncludedAssignment_1_1_1.eContents().get(0);
		
		//IncludeStatement:
		//	'include' (included+=EReferenceName (',' included+=EReferenceName)*);
		@Override public ParserRule getRule() { return rule; }
		
		//'include' (included+=EReferenceName (',' included+=EReferenceName)*)
		public Group getGroup() { return cGroup; }
		
		//'include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//included+=EReferenceName (',' included+=EReferenceName)*
		public Group getGroup_1() { return cGroup_1; }
		
		//included+=EReferenceName
		public Assignment getIncludedAssignment_1_0() { return cIncludedAssignment_1_0; }
		
		//EReferenceName
		public RuleCall getIncludedEReferenceNameParserRuleCall_1_0_0() { return cIncludedEReferenceNameParserRuleCall_1_0_0; }
		
		//(',' included+=EReferenceName)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//included+=EReferenceName
		public Assignment getIncludedAssignment_1_1_1() { return cIncludedAssignment_1_1_1; }
		
		//EReferenceName
		public RuleCall getIncludedEReferenceNameParserRuleCall_1_1_1_0() { return cIncludedEReferenceNameParserRuleCall_1_1_1_0; }
	}
	public class WithStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.jahed.papyrusrt.persistence.dsl.Persist.WithStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cReferencingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIncludedAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIncludedEClassNameParserRuleCall_2_0_0 = (RuleCall)cIncludedAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIncludedAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIncludedEClassNameParserRuleCall_2_1_1_0 = (RuleCall)cIncludedAssignment_2_1_1.eContents().get(0);
		
		//WithStatement:
		//	'with' 'referencing' (included+=EClassName (',' included+=EClassName)*);
		@Override public ParserRule getRule() { return rule; }
		
		//'with' 'referencing' (included+=EClassName (',' included+=EClassName)*)
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//'referencing'
		public Keyword getReferencingKeyword_1() { return cReferencingKeyword_1; }
		
		//included+=EClassName (',' included+=EClassName)*
		public Group getGroup_2() { return cGroup_2; }
		
		//included+=EClassName
		public Assignment getIncludedAssignment_2_0() { return cIncludedAssignment_2_0; }
		
		//EClassName
		public RuleCall getIncludedEClassNameParserRuleCall_2_0_0() { return cIncludedEClassNameParserRuleCall_2_0_0; }
		
		//(',' included+=EClassName)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//included+=EClassName
		public Assignment getIncludedAssignment_2_1_1() { return cIncludedAssignment_2_1_1; }
		
		//EClassName
		public RuleCall getIncludedEClassNameParserRuleCall_2_1_1_0() { return cIncludedEClassNameParserRuleCall_2_1_1_0; }
	}
	public class CallStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.jahed.papyrusrt.persistence.dsl.Persist.CallStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRulesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRulesIDTerminalRuleCall_1_0_0 = (RuleCall)cRulesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRulesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRulesIDTerminalRuleCall_1_1_1_0 = (RuleCall)cRulesAssignment_1_1_1.eContents().get(0);
		
		//CallStatement:
		//	'call' (rules+=ID (',' rules+=ID)*);
		@Override public ParserRule getRule() { return rule; }
		
		//'call' (rules+=ID (',' rules+=ID)*)
		public Group getGroup() { return cGroup; }
		
		//'call'
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }
		
		//rules+=ID (',' rules+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//rules+=ID
		public Assignment getRulesAssignment_1_0() { return cRulesAssignment_1_0; }
		
		//ID
		public RuleCall getRulesIDTerminalRuleCall_1_0_0() { return cRulesIDTerminalRuleCall_1_0_0; }
		
		//(',' rules+=ID)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//rules+=ID
		public Assignment getRulesAssignment_1_1_1() { return cRulesAssignment_1_1_1; }
		
		//ID
		public RuleCall getRulesIDTerminalRuleCall_1_1_1_0() { return cRulesIDTerminalRuleCall_1_1_1_0; }
	}
	public class EClassNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.jahed.papyrusrt.persistence.dsl.Persist.EClassName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBaseIDTerminalRuleCall_0_0 = (RuleCall)cBaseAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFieldsIDTerminalRuleCall_1_1_0 = (RuleCall)cFieldsAssignment_1_1.eContents().get(0);
		
		//EClassName:
		//	base=ID ('.' fields+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//base=ID ('.' fields+=ID)*
		public Group getGroup() { return cGroup; }
		
		//base=ID
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }
		
		//ID
		public RuleCall getBaseIDTerminalRuleCall_0_0() { return cBaseIDTerminalRuleCall_0_0; }
		
		//('.' fields+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//fields+=ID
		public Assignment getFieldsAssignment_1_1() { return cFieldsAssignment_1_1; }
		
		//ID
		public RuleCall getFieldsIDTerminalRuleCall_1_1_0() { return cFieldsIDTerminalRuleCall_1_1_0; }
	}
	public class EAttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.jahed.papyrusrt.persistence.dsl.Persist.EAttributeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBaseIDTerminalRuleCall_0_0 = (RuleCall)cBaseAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFieldsIDTerminalRuleCall_1_1_0 = (RuleCall)cFieldsAssignment_1_1.eContents().get(0);
		
		//EAttributeName:
		//	base=ID ('.' fields+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//base=ID ('.' fields+=ID)*
		public Group getGroup() { return cGroup; }
		
		//base=ID
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }
		
		//ID
		public RuleCall getBaseIDTerminalRuleCall_0_0() { return cBaseIDTerminalRuleCall_0_0; }
		
		//('.' fields+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//fields+=ID
		public Assignment getFieldsAssignment_1_1() { return cFieldsAssignment_1_1; }
		
		//ID
		public RuleCall getFieldsIDTerminalRuleCall_1_1_0() { return cFieldsIDTerminalRuleCall_1_1_0; }
	}
	public class EReferenceNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.jahed.papyrusrt.persistence.dsl.Persist.EReferenceName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBaseIDTerminalRuleCall_0_0 = (RuleCall)cBaseAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFieldsIDTerminalRuleCall_1_1_0 = (RuleCall)cFieldsAssignment_1_1.eContents().get(0);
		
		//EReferenceName:
		//	base=ID ('.' fields+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//base=ID ('.' fields+=ID)*
		public Group getGroup() { return cGroup; }
		
		//base=ID
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }
		
		//ID
		public RuleCall getBaseIDTerminalRuleCall_0_0() { return cBaseIDTerminalRuleCall_0_0; }
		
		//('.' fields+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//fields+=ID
		public Assignment getFieldsAssignment_1_1() { return cFieldsAssignment_1_1; }
		
		//ID
		public RuleCall getFieldsIDTerminalRuleCall_1_1_0() { return cFieldsIDTerminalRuleCall_1_1_0; }
	}
	
	
	private final PersistElements pPersist;
	private final RuleStatementElements pRuleStatement;
	private final ForEachStatementElements pForEachStatement;
	private final CreateStatementElements pCreateStatement;
	private final CreateFolderStatementElements pCreateFolderStatement;
	private final CreateFileStatementElements pCreateFileStatement;
	private final FileNameElements pFileName;
	private final IncludeStatementElements pIncludeStatement;
	private final WithStatementElements pWithStatement;
	private final CallStatementElements pCallStatement;
	private final EClassNameElements pEClassName;
	private final EAttributeNameElements pEAttributeName;
	private final EReferenceNameElements pEReferenceName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PersistGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPersist = new PersistElements();
		this.pRuleStatement = new RuleStatementElements();
		this.pForEachStatement = new ForEachStatementElements();
		this.pCreateStatement = new CreateStatementElements();
		this.pCreateFolderStatement = new CreateFolderStatementElements();
		this.pCreateFileStatement = new CreateFileStatementElements();
		this.pFileName = new FileNameElements();
		this.pIncludeStatement = new IncludeStatementElements();
		this.pWithStatement = new WithStatementElements();
		this.pCallStatement = new CallStatementElements();
		this.pEClassName = new EClassNameElements();
		this.pEAttributeName = new EAttributeNameElements();
		this.pEReferenceName = new EReferenceNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ca.jahed.papyrusrt.persistence.dsl.Persist".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Persist:
	//	'model' model=STRING '{'
	//	statements+=RuleStatement*
	//	'}';
	public PersistElements getPersistAccess() {
		return pPersist;
	}
	
	public ParserRule getPersistRule() {
		return getPersistAccess().getRule();
	}
	
	//RuleStatement:
	//	'rule' id=ID '{'
	//	rules+=ForEachStatement*
	//	'}';
	public RuleStatementElements getRuleStatementAccess() {
		return pRuleStatement;
	}
	
	public ParserRule getRuleStatementRule() {
		return getRuleStatementAccess().getRule();
	}
	
	//ForEachStatement:
	//	'foreach' class=EClassName '{' (contents+=CreateStatement
	//	| calls+=CallStatement)*
	//	'}';
	public ForEachStatementElements getForEachStatementAccess() {
		return pForEachStatement;
	}
	
	public ParserRule getForEachStatementRule() {
		return getForEachStatementAccess().getRule();
	}
	
	//CreateStatement:
	//	CreateFileStatement | CreateFolderStatement;
	public CreateStatementElements getCreateStatementAccess() {
		return pCreateStatement;
	}
	
	public ParserRule getCreateStatementRule() {
		return getCreateStatementAccess().getRule();
	}
	
	//CreateFolderStatement:
	//	'create' 'folder' name=FileName '{' (contents+=CreateStatement
	//	| calls+=CallStatement)*
	//	'}';
	public CreateFolderStatementElements getCreateFolderStatementAccess() {
		return pCreateFolderStatement;
	}
	
	public ParserRule getCreateFolderStatementRule() {
		return getCreateFolderStatementAccess().getRule();
	}
	
	//CreateFileStatement:
	//	'save' 'in' name=FileName (includedReferencing=WithStatement | includedAttributes=IncludeStatement)?;
	public CreateFileStatementElements getCreateFileStatementAccess() {
		return pCreateFileStatement;
	}
	
	public ParserRule getCreateFileStatementRule() {
		return getCreateFileStatementAccess().getRule();
	}
	
	//FileName:
	//	(prefix=STRING | attr=EAttributeName) ('+' right=FileName)?;
	public FileNameElements getFileNameAccess() {
		return pFileName;
	}
	
	public ParserRule getFileNameRule() {
		return getFileNameAccess().getRule();
	}
	
	//IncludeStatement:
	//	'include' (included+=EReferenceName (',' included+=EReferenceName)*);
	public IncludeStatementElements getIncludeStatementAccess() {
		return pIncludeStatement;
	}
	
	public ParserRule getIncludeStatementRule() {
		return getIncludeStatementAccess().getRule();
	}
	
	//WithStatement:
	//	'with' 'referencing' (included+=EClassName (',' included+=EClassName)*);
	public WithStatementElements getWithStatementAccess() {
		return pWithStatement;
	}
	
	public ParserRule getWithStatementRule() {
		return getWithStatementAccess().getRule();
	}
	
	//CallStatement:
	//	'call' (rules+=ID (',' rules+=ID)*);
	public CallStatementElements getCallStatementAccess() {
		return pCallStatement;
	}
	
	public ParserRule getCallStatementRule() {
		return getCallStatementAccess().getRule();
	}
	
	//EClassName:
	//	base=ID ('.' fields+=ID)*;
	public EClassNameElements getEClassNameAccess() {
		return pEClassName;
	}
	
	public ParserRule getEClassNameRule() {
		return getEClassNameAccess().getRule();
	}
	
	//EAttributeName:
	//	base=ID ('.' fields+=ID)*;
	public EAttributeNameElements getEAttributeNameAccess() {
		return pEAttributeName;
	}
	
	public ParserRule getEAttributeNameRule() {
		return getEAttributeNameAccess().getRule();
	}
	
	//EReferenceName:
	//	base=ID ('.' fields+=ID)*;
	public EReferenceNameElements getEReferenceNameAccess() {
		return pEReferenceName;
	}
	
	public ParserRule getEReferenceNameRule() {
		return getEReferenceNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
