/*
 * generated by Xtext 2.14.0
 */
package ca.jahed.papyrusrt.persistence.dsl.serializer;

import ca.jahed.papyrusrt.persistence.dsl.persist.CallStatement;
import ca.jahed.papyrusrt.persistence.dsl.persist.CreateFileStatement;
import ca.jahed.papyrusrt.persistence.dsl.persist.CreateFolderStatement;
import ca.jahed.papyrusrt.persistence.dsl.persist.EAttributeName;
import ca.jahed.papyrusrt.persistence.dsl.persist.EClassName;
import ca.jahed.papyrusrt.persistence.dsl.persist.EReferenceName;
import ca.jahed.papyrusrt.persistence.dsl.persist.FileName;
import ca.jahed.papyrusrt.persistence.dsl.persist.ForEachStatement;
import ca.jahed.papyrusrt.persistence.dsl.persist.IncludeStatement;
import ca.jahed.papyrusrt.persistence.dsl.persist.Persist;
import ca.jahed.papyrusrt.persistence.dsl.persist.PersistPackage;
import ca.jahed.papyrusrt.persistence.dsl.persist.RuleStatement;
import ca.jahed.papyrusrt.persistence.dsl.persist.WithStatement;
import ca.jahed.papyrusrt.persistence.dsl.services.PersistGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class PersistSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PersistGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PersistPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PersistPackage.CALL_STATEMENT:
				sequence_CallStatement(context, (CallStatement) semanticObject); 
				return; 
			case PersistPackage.CREATE_FILE_STATEMENT:
				sequence_CreateFileStatement(context, (CreateFileStatement) semanticObject); 
				return; 
			case PersistPackage.CREATE_FOLDER_STATEMENT:
				sequence_CreateFolderStatement(context, (CreateFolderStatement) semanticObject); 
				return; 
			case PersistPackage.EATTRIBUTE_NAME:
				sequence_EAttributeName(context, (EAttributeName) semanticObject); 
				return; 
			case PersistPackage.ECLASS_NAME:
				sequence_EClassName(context, (EClassName) semanticObject); 
				return; 
			case PersistPackage.EREFERENCE_NAME:
				sequence_EReferenceName(context, (EReferenceName) semanticObject); 
				return; 
			case PersistPackage.FILE_NAME:
				sequence_FileName(context, (FileName) semanticObject); 
				return; 
			case PersistPackage.FOR_EACH_STATEMENT:
				sequence_ForEachStatement(context, (ForEachStatement) semanticObject); 
				return; 
			case PersistPackage.INCLUDE_STATEMENT:
				sequence_IncludeStatement(context, (IncludeStatement) semanticObject); 
				return; 
			case PersistPackage.PERSIST:
				sequence_Persist(context, (Persist) semanticObject); 
				return; 
			case PersistPackage.RULE_STATEMENT:
				sequence_RuleStatement(context, (RuleStatement) semanticObject); 
				return; 
			case PersistPackage.WITH_STATEMENT:
				sequence_WithStatement(context, (WithStatement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CallStatement returns CallStatement
	 *
	 * Constraint:
	 *     (rules+=ID rules+=ID*)
	 */
	protected void sequence_CallStatement(ISerializationContext context, CallStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CreateStatement returns CreateFileStatement
	 *     CreateFileStatement returns CreateFileStatement
	 *
	 * Constraint:
	 *     (name=FileName (includedReferencing=WithStatement | includedAttributes=IncludeStatement)?)
	 */
	protected void sequence_CreateFileStatement(ISerializationContext context, CreateFileStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CreateStatement returns CreateFolderStatement
	 *     CreateFolderStatement returns CreateFolderStatement
	 *
	 * Constraint:
	 *     (name=FileName (contents+=CreateStatement | calls+=CallStatement)*)
	 */
	protected void sequence_CreateFolderStatement(ISerializationContext context, CreateFolderStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAttributeName returns EAttributeName
	 *
	 * Constraint:
	 *     (base=ID fields+=ID*)
	 */
	protected void sequence_EAttributeName(ISerializationContext context, EAttributeName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EClassName returns EClassName
	 *
	 * Constraint:
	 *     (base=ID fields+=ID*)
	 */
	protected void sequence_EClassName(ISerializationContext context, EClassName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EReferenceName returns EReferenceName
	 *
	 * Constraint:
	 *     (base=ID fields+=ID*)
	 */
	protected void sequence_EReferenceName(ISerializationContext context, EReferenceName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FileName returns FileName
	 *
	 * Constraint:
	 *     ((prefix=STRING | attr=EAttributeName) right=FileName?)
	 */
	protected void sequence_FileName(ISerializationContext context, FileName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ForEachStatement returns ForEachStatement
	 *
	 * Constraint:
	 *     (class=EClassName (contents+=CreateStatement | calls+=CallStatement)*)
	 */
	protected void sequence_ForEachStatement(ISerializationContext context, ForEachStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IncludeStatement returns IncludeStatement
	 *
	 * Constraint:
	 *     (included+=EReferenceName included+=EReferenceName*)
	 */
	protected void sequence_IncludeStatement(ISerializationContext context, IncludeStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Persist returns Persist
	 *
	 * Constraint:
	 *     (model=STRING statements+=RuleStatement*)
	 */
	protected void sequence_Persist(ISerializationContext context, Persist semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RuleStatement returns RuleStatement
	 *
	 * Constraint:
	 *     (id=ID rules+=ForEachStatement*)
	 */
	protected void sequence_RuleStatement(ISerializationContext context, RuleStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WithStatement returns WithStatement
	 *
	 * Constraint:
	 *     (included+=EClassName included+=EClassName*)
	 */
	protected void sequence_WithStatement(ISerializationContext context, WithStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
